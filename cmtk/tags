!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
AFX_INIHELPER_H__E176C25B_C58B_4765_B150_4A8E42898ED4__INCLUDED_	IniHelper.h	6;"	d
BADARG	getopt.cpp	17;"	d	file:
BADCH	getopt.cpp	16;"	d	file:
BLUE	ColorDefine.h	8;"	d
BROWN	ColorDefine.h	15;"	d
BSC32	main.mak	/^BSC32=bscmake.exe$/;"	m
BSC32_FLAGS	main.mak	/^BSC32_FLAGS=\/nologo \/o"$(OUTDIR)\\main.bsc" $/;"	m
BSC32_SBRS	main.mak	/^BSC32_SBRS= \\$/;"	m
CC	Makefile	/^CC=c++$/;"	m
CFG	main.mak	/^CFG=main - Win32 Debug$/;"	m
CFLAG	Makefile	/^CFLAG=-c -Wall -I.\/ -D__LINUX__ -g -I\/usr\/local\/Ice-3.3.1\/include$/;"	m
CIniHelper	IniHelper.cpp	/^CIniHelper::CIniHelper(const char* file)$/;"	f	class:CIniHelper
CIniHelper	IniHelper.h	/^class CIniHelper  $/;"	c
CLI_OBJS	Makefile	/^CLI_OBJS=*.o$/;"	m
CLOSE	os_independent.h	16;"	d
CLOSE	os_independent.h	47;"	d
CLOSE_FILE	os_independent.h	15;"	d
CMD_LEN	cmconfig.h	21;"	d
CMTK_CONF	cmconfig.h	11;"	d
CM_IP_LIST	cmconfig.h	10;"	d
CONF_DIR	cmconfig.h	13;"	d
CONF_FILE	cmconfig.h	12;"	d
CPP	main.mak	/^CPP=cl.exe$/;"	m
CPP_PROJ	main.mak	/^CPP_PROJ=\/nologo \/MD \/W3 \/GR \/GX \/O2 \/D "WIN32" \/D "NDEBUG" \/D "_CONSOLE" \/D "_MBCS" \/D "_AFXDLL" \/Fp"$(INTDIR)\\main.pch" \/YX \/Fo"$(INTDIR)\\\\" \/Fd"$(INTDIR)\\\\" \/FD \/c $/;"	m
CPP_PROJ	main.mak	/^CPP_PROJ=\/nologo \/MDd \/W3 \/Gm \/GR \/GX \/ZI \/Od \/D "WIN32" \/D "_DEBUG" \/D "_CONSOLE" \/D "_MBCS" \/D "_AFXDLL" \/Fp"$(INTDIR)\\main.pch" \/YX \/Fo"$(INTDIR)\\\\" \/Fd"$(INTDIR)\\\\" \/FD \/GZ \/c $/;"	m
CYAN	ColorDefine.h	11;"	d
CmdMessageHandler	cmtkp.h	/^class CmdMessageHandler : virtual public ::Ice::Object$/;"	c	namespace:cmtkp
CmdMessageHandler	cmtkp.h	/^class CmdMessageHandler : virtual public ::IceDelegate::Ice::Object$/;"	c	namespace:IceDelegate::cmtkp
CmdMessageHandler	cmtkp.h	/^class CmdMessageHandler : virtual public ::IceDelegate::cmtkp::CmdMessageHandler,$/;"	c	namespace:IceDelegateD::cmtkp
CmdMessageHandler	cmtkp.h	/^class CmdMessageHandler : virtual public ::IceDelegate::cmtkp::CmdMessageHandler,$/;"	c	namespace:IceDelegateM::cmtkp
CmdMessageHandler	cmtkp.h	/^class CmdMessageHandler : virtual public ::IceProxy::Ice::Object$/;"	c	namespace:IceProxy::cmtkp
CmdMessageHandlerPrx	cmtkp.h	/^typedef ::IceInternal::ProxyHandle< ::IceProxy::cmtkp::CmdMessageHandler> CmdMessageHandlerPrx;$/;"	t	namespace:cmtkp
CmdMessageHandlerPtr	cmtkp.h	/^typedef ::IceInternal::Handle< ::cmtkp::CmdMessageHandler> CmdMessageHandlerPtr;$/;"	t	namespace:cmtkp
CommandMessage	cmtkp.h	/^struct CommandMessage$/;"	s	namespace:cmtkp
DARY_GRAY	ColorDefine.h	10;"	d
DEV_TYPE_CMD	cmconfig.h	8;"	d
DEV_TYPE_STAT	cmconfig.h	9;"	d
DFLAG	Makefile	/^DFLAG=-L\/lib\/nptl -lrt -lIce -lIceUtil -lpthread -L\/usr\/local\/Ice-3.3.1\/lib$/;"	m
DFT_DM	cmconfig.h	5;"	d
DFT_MODE	cmconfig.h	6;"	d
DFT_PORT	cmconfig.h	4;"	d
DFT_THREAD	cmconfig.h	7;"	d
EMSG	getopt.cpp	18;"	d	file:
ErrorOccurence	IniHelper.cpp	/^int CIniHelper::ErrorOccurence()$/;"	f	class:CIniHelper
GETPID	os_independent.h	65;"	d
GETPID	os_independent.h	67;"	d
GREEN	ColorDefine.h	6;"	d
GetNetip	NetHelper.cpp	/^int	GetNetip(\/*unsigned int *ip*\/device_t *list)$/;"	f
GetNetip	NetHelper.cpp	/^int	GetNetip(device_t *list)$/;"	f
HOST_NAME	cmconfig.h	26;"	d
INTDIR	main.mak	/^INTDIR=.\\Debug$/;"	m
INTDIR	main.mak	/^INTDIR=.\\Release$/;"	m
IceDelegate	cmtkp.h	/^namespace IceDelegate$/;"	n
IceDelegateD	cmtkp.h	/^namespace IceDelegateD$/;"	n
IceDelegateM	cmtkp.h	/^namespace IceDelegateM$/;"	n
IceInternal	cmtkp.h	/^namespace IceInternal$/;"	n
IceProxy	cmtkp.h	/^namespace IceProxy$/;"	n
LIGHT_BLUE	ColorDefine.h	9;"	d
LIGHT_CYAN	ColorDefine.h	12;"	d
LIGHT_GRAY	ColorDefine.h	17;"	d
LIGHT_GREEN	ColorDefine.h	7;"	d
LIGHT_PURPLE	ColorDefine.h	14;"	d
LIGHT_RED	ColorDefine.h	5;"	d
LINK32	main.mak	/^LINK32=link.exe$/;"	m
LINK32_FLAGS	main.mak	/^LINK32_FLAGS=ice.lib iceutil.lib \/nologo \/subsystem:console \/incremental:no \/pdb:"$(OUTDIR)\\cmtk.pdb" \/machine:I386 \/out:"cmtk.exe" $/;"	m
LINK32_FLAGS	main.mak	/^LINK32_FLAGS=ice.lib iceutil.lib \/nologo \/subsystem:console \/incremental:yes \/pdb:"$(OUTDIR)\\cmtkD.pdb" \/debug \/machine:I386 \/out:"cmtkD.exe" \/pdbtype:sept $/;"	m
LINK32_OBJS	main.mak	/^LINK32_OBJS= \\$/;"	m
MAX	IniHelper.cpp	3;"	d	file:
MAX_DEV	cmconfig.h	24;"	d
MAX_DEV_THREAD	cmconfig.h	25;"	d
MAX_LOCAL_ADDR	cmconfig.h	43;"	d
MAX_SEC	IniHelper.h	15;"	d
MAX_TASK_NUM	cmconfig.h	23;"	d
MAX_VAL	os_independent.h	60;"	d
MAX_VAR	IniHelper.h	14;"	d
MIN	IniHelper.cpp	4;"	d	file:
MIN_VAL	os_independent.h	61;"	d
MODE_CMD	cmconfig.h	15;"	d
MODE_DOWNLOAD_FILE	cmconfig.h	17;"	d
MODE_UPLOAD_FILE	cmconfig.h	16;"	d
MSG_DONTWAIT	os_independent.h	55;"	d
MSG_NOSIGNAL	os_independent.h	51;"	d
MSG_TYPE_CMD	constdef.h	4;"	d
MSG_TYPE_DOWN_FILE	constdef.h	6;"	d
MSG_TYPE_STAT	constdef.h	3;"	d
MSG_TYPE_UP_FILE	constdef.h	5;"	d
NONE	ColorDefine.h	3;"	d
NULL	main.mak	/^NULL=$/;"	m
NULL	main.mak	/^NULL=nul$/;"	m
OUTDIR	main.mak	/^OUTDIR=.\\Debug$/;"	m
OUTDIR	main.mak	/^OUTDIR=.\\Release$/;"	m
PROXY_LEN	constdef.h	7;"	d
PURPLE	ColorDefine.h	13;"	d
PointerType	cmtkp.h	/^    typedef CmdMessageHandlerPtr PointerType;$/;"	t	class:cmtkp::CmdMessageHandler
ProcessMagicMessage	cmtkp.cpp	/^IceDelegateD::cmtkp::CmdMessageHandler::ProcessMagicMessage(const ::cmtkp::magicmsg& msg, const ::Ice::Context* __context)$/;"	f	class:IceDelegateD::cmtkp::CmdMessageHandler
ProcessMagicMessage	cmtkp.cpp	/^IceDelegateM::cmtkp::CmdMessageHandler::ProcessMagicMessage(const ::cmtkp::magicmsg& msg, const ::Ice::Context* __context)$/;"	f	class:IceDelegateM::cmtkp::CmdMessageHandler
ProcessMagicMessage	cmtkp.cpp	/^IceProxy::cmtkp::CmdMessageHandler::ProcessMagicMessage(const ::cmtkp::magicmsg& msg, const ::Ice::Context* __ctx)$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ProcessMagicMessage	cmtkp.h	/^    ::Ice::Int ProcessMagicMessage(const ::cmtkp::magicmsg& msg)$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ProcessMagicMessage	cmtkp.h	/^    ::Ice::Int ProcessMagicMessage(const ::cmtkp::magicmsg& msg, const ::Ice::Context& __ctx)$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ProcessMessage	cmtkp.cpp	/^IceDelegateD::cmtkp::CmdMessageHandler::ProcessMessage(const ::cmtkp::CommandMessage& msg, const ::Ice::Context* __context)$/;"	f	class:IceDelegateD::cmtkp::CmdMessageHandler
ProcessMessage	cmtkp.cpp	/^IceDelegateM::cmtkp::CmdMessageHandler::ProcessMessage(const ::cmtkp::CommandMessage& msg, const ::Ice::Context* __context)$/;"	f	class:IceDelegateM::cmtkp::CmdMessageHandler
ProcessMessage	cmtkp.cpp	/^IceProxy::cmtkp::CmdMessageHandler::ProcessMessage(const ::cmtkp::CommandMessage& msg, const ::Ice::Context* __ctx)$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ProcessMessage	cmtkp.h	/^    ::cmtkp::CommandMessage ProcessMessage(const ::cmtkp::CommandMessage& msg)$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ProcessMessage	cmtkp.h	/^    ::cmtkp::CommandMessage ProcessMessage(const ::cmtkp::CommandMessage& msg, const ::Ice::Context& __ctx)$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ProxyType	cmtkp.h	/^    typedef CmdMessageHandlerPrx ProxyType;$/;"	t	class:cmtkp::CmdMessageHandler
RED	ColorDefine.h	4;"	d
RET_CONNECT_FAILED	constdef.h	10;"	d
RET_DIR	constdef.h	13;"	d
RET_RUNCMD_FAILED	constdef.h	11;"	d
RET_SUCCES	constdef.h	12;"	d
RMODE	os_independent.h	19;"	d
RMODE	os_independent.h	28;"	d
RSC	main.mak	/^RSC=rc.exe$/;"	m
RUN_BACK	cmconfig.h	20;"	d
RUN_REAL	cmconfig.h	19;"	d
ReadInt	IniHelper.cpp	/^int CIniHelper::ReadInt(const char *szSec, const char *szName, int nDefault)$/;"	f	class:CIniHelper
ReadSection	IniHelper.cpp	/^int CIniHelper::ReadSection(section & pSec)$/;"	f	class:CIniHelper
ReadString	IniHelper.cpp	/^char* CIniHelper::ReadString(const char *szSec, const char *szName, const char *szDefault)$/;"	f	class:CIniHelper
SEC_TITLE	IniHelper.h	13;"	d
SLEEPM	os_independent.h	20;"	d
SLEEPM	os_independent.h	46;"	d
SOURCE	main.mak	/^SOURCE=.\\IniHelper.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\NetHelper.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\cm_function.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\cm_init.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\cm_init_dev.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\cm_init_task.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\cmtkp.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\getopt.cpp$/;"	m
SOURCE	main.mak	/^SOURCE=.\\main.cpp$/;"	m
STR_IP	cmconfig.h	38;"	d
STR_IP	os_independent.h	57;"	d
StringArray	cmtkp.h	/^typedef ::std::vector< ::std::string> StringArray;$/;"	t	namespace:cmtkp
StringArray2	cmtkp.h	/^typedef ::std::vector< ::cmtkp::StringArray> StringArray2;$/;"	t	namespace:cmtkp
TASKNUM	cmconfig.h	14;"	d
TASK_POOL_SIZE	cmconfig.h	161;"	d
UNLINK	os_independent.h	22;"	d
UNLINK	os_independent.h	48;"	d
USER_NAME	cmconfig.h	44;"	d
VAR_NAME	IniHelper.h	11;"	d
VAR_VAL	IniHelper.h	12;"	d
WHITE	ColorDefine.h	18;"	d
YELLOW	ColorDefine.h	16;"	d
_CM_CONFIG_H_	cmconfig.h	2;"	d
_CONST_DEF_H_	constdef.h	2;"	d
_CPLOR_DEF_	ColorDefine.h	2;"	d
_NT_HELPER_H_	NetHelper.h	2;"	d
_OS_INDEP_H_	os_independent.h	2;"	d
___ProcessMagicMessage	cmtkp.cpp	/^cmtkp::CmdMessageHandler::___ProcessMagicMessage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)$/;"	f	class:cmtkp::CmdMessageHandler
___ProcessMessage	cmtkp.cpp	/^cmtkp::CmdMessageHandler::___ProcessMessage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)$/;"	f	class:cmtkp::CmdMessageHandler
__cmtkp__CmdMessageHandler__ProcessMagicMessage_name	cmtkp.cpp	/^static const ::std::string __cmtkp__CmdMessageHandler__ProcessMagicMessage_name = "ProcessMagicMessage";$/;"	v	file:
__cmtkp__CmdMessageHandler__ProcessMessage_name	cmtkp.cpp	/^static const ::std::string __cmtkp__CmdMessageHandler__ProcessMessage_name = "ProcessMessage";$/;"	v	file:
__cmtkp__CmdMessageHandler_all	cmtkp.cpp	/^static ::std::string __cmtkp__CmdMessageHandler_all[] =$/;"	v	file:
__cmtkp__CmdMessageHandler_ids	cmtkp.cpp	/^static const ::std::string __cmtkp__CmdMessageHandler_ids[2] =$/;"	v	file:
__cmtkp_h__	cmtkp.h	14;"	d
__createDelegateD	cmtkp.cpp	/^IceProxy::cmtkp::CmdMessageHandler::__createDelegateD()$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
__createDelegateM	cmtkp.cpp	/^IceProxy::cmtkp::CmdMessageHandler::__createDelegateM()$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
__dispatch	cmtkp.cpp	/^cmtkp::CmdMessageHandler::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)$/;"	f	class:cmtkp::CmdMessageHandler
__newInstance	cmtkp.cpp	/^IceProxy::cmtkp::CmdMessageHandler::__newInstance() const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
__patch__CmdMessageHandlerPtr	cmtkp.cpp	/^cmtkp::__patch__CmdMessageHandlerPtr(void* __addr, ::Ice::ObjectPtr& v)$/;"	f	class:cmtkp
__read	cmtkp.cpp	/^cmtkp::CmdMessageHandler::__read(::IceInternal::BasicStream* __is, bool __rid)$/;"	f	class:cmtkp::CmdMessageHandler
__read	cmtkp.cpp	/^cmtkp::CmdMessageHandler::__read(const ::Ice::InputStreamPtr&, bool)$/;"	f	class:cmtkp::CmdMessageHandler
__read	cmtkp.cpp	/^cmtkp::CommandMessage::__read(::IceInternal::BasicStream* __is)$/;"	f	class:cmtkp::CommandMessage
__read	cmtkp.cpp	/^cmtkp::__read(::IceInternal::BasicStream* __is, ::cmtkp::CmdMessageHandlerPrx& v)$/;"	f	class:cmtkp
__read	cmtkp.cpp	/^cmtkp::command::__read(::IceInternal::BasicStream* __is)$/;"	f	class:cmtkp::command
__read	cmtkp.cpp	/^cmtkp::magicmsg::__read(::IceInternal::BasicStream* __is)$/;"	f	class:cmtkp::magicmsg
__read	cmtkp.cpp	/^cmtkp::msghead::__read(::IceInternal::BasicStream* __is)$/;"	f	class:cmtkp::msghead
__read	cmtkp.cpp	/^cmtkp::response::__read(::IceInternal::BasicStream* __is)$/;"	f	class:cmtkp::response
__readStringArray2	cmtkp.cpp	/^cmtkp::__readStringArray2(::IceInternal::BasicStream* __is, ::cmtkp::StringArray2& v)$/;"	f	class:cmtkp
__write	cmtkp.cpp	/^cmtkp::CmdMessageHandler::__write(::IceInternal::BasicStream* __os) const$/;"	f	class:cmtkp::CmdMessageHandler
__write	cmtkp.cpp	/^cmtkp::CmdMessageHandler::__write(const ::Ice::OutputStreamPtr&) const$/;"	f	class:cmtkp::CmdMessageHandler
__write	cmtkp.cpp	/^cmtkp::CommandMessage::__write(::IceInternal::BasicStream* __os) const$/;"	f	class:cmtkp::CommandMessage
__write	cmtkp.cpp	/^cmtkp::command::__write(::IceInternal::BasicStream* __os) const$/;"	f	class:cmtkp::command
__write	cmtkp.cpp	/^cmtkp::magicmsg::__write(::IceInternal::BasicStream* __os) const$/;"	f	class:cmtkp::magicmsg
__write	cmtkp.cpp	/^cmtkp::msghead::__write(::IceInternal::BasicStream* __os) const$/;"	f	class:cmtkp::msghead
__write	cmtkp.cpp	/^cmtkp::response::__write(::IceInternal::BasicStream* __os) const$/;"	f	class:cmtkp::response
__writeStringArray2	cmtkp.cpp	/^cmtkp::__writeStringArray2(::IceInternal::BasicStream* __os, const ::cmtkp::StringArray* begin, const ::cmtkp::StringArray* end)$/;"	f	class:cmtkp
atoll	os_independent.h	/^static _int64 atoll(const char *string){return _atoi64(string);} $/;"	f
byteArray	cmtkp.h	/^typedef ::std::vector< ::Ice::Byte> byteArray;$/;"	t	namespace:cmtkp
clientaddr	cmtkp.h	/^    ::Ice::Long clientaddr;$/;"	m	struct:cmtkp::command
clientid	cmtkp.h	/^    ::Ice::Long clientid;$/;"	m	struct:cmtkp::command
cm_client_config_t	cmconfig.h	/^}cm_client_config_t;$/;"	t	typeref:struct:__anon1
cmd	cmtkp.h	/^    ::std::string cmd;$/;"	m	struct:cmtkp::CommandMessage
cmdev_t	cmconfig.h	/^}cmdev_t;$/;"	t	typeref:struct:__anon2
cmdid	cmtkp.h	/^    ::Ice::Int cmdid;$/;"	m	struct:cmtkp::command
cmdtype	cmtkp.h	/^    ::Ice::Int cmdtype;$/;"	m	struct:cmtkp::command
cmtkp	cmtkp.h	/^namespace cmtkp$/;"	n
cmtkp	cmtkp.h	/^namespace cmtkp$/;"	n	namespace:IceDelegate
cmtkp	cmtkp.h	/^namespace cmtkp$/;"	n	namespace:IceDelegateD
cmtkp	cmtkp.h	/^namespace cmtkp$/;"	n	namespace:IceDelegateM
cmtkp	cmtkp.h	/^namespace cmtkp$/;"	n	namespace:IceProxy
color	cmconfig.h	/^	unsigned short  color;			\/\/print with color$/;"	m	struct:__anon1
command	cmconfig.h	/^	char		command[CMD_LEN];	\/\/which command to run$/;"	m	struct:__anon1
command	cmtkp.h	/^struct command$/;"	s	namespace:cmtkp
commandid	cmtkp.h	/^    ::Ice::Long commandid;$/;"	m	struct:cmtkp::msghead
conf	cmconfig.h	/^	char		conf[CONF_FILE];	\/\/where the ip list stored when we want to run a batch command$/;"	m	struct:__anon1
config	cmconfig.h	/^	cm_client_config_t * config;$/;"	m	struct:__anon3
data	cmtkp.h	/^    ::cmtkp::byteArray data;$/;"	m	struct:cmtkp::command
data	cmtkp.h	/^    ::cmtkp::byteArray data;$/;"	m	struct:cmtkp::magicmsg
desc	cmconfig.h	/^	char desc[30];$/;"	m	struct:__anon7
dev_index	cmconfig.h	/^	unsigned long dev_index;$/;"	m	struct:__anon2
dev_ip	cmconfig.h	/^	unsigned int dev_ip;  	\/\/device ip$/;"	m	struct:__anon2
dev_list	cmconfig.h	/^	cmdev_t * 	dev_list[MAX_DEV_THREAD]; \/\/all device(s) for this thread to serve$/;"	m	struct:__anon3
dev_list	cmconfig.h	/^	cmdev_t dev_list[MAX_DEV]; \/\/device list$/;"	m	struct:__anon5
dev_list_t	cmconfig.h	/^}dev_list_t;$/;"	t	typeref:struct:__anon5
dev_name	cmconfig.h	/^	char		dev_name[HOST_NAME];$/;"	m	struct:__anon2
dev_num	cmconfig.h	/^	int	  	dev_num;\/\/number of device		$/;"	m	struct:__anon3
dev_num	cmconfig.h	/^	int   dev_num; \/\/device number$/;"	m	struct:__anon5
device_t	NetHelper.h	/^	}device_t;$/;"	t	typeref:struct:__anon8
dst_file	cmconfig.h	/^	char		dst_file[CONF_DIR];		\/\/where to upload the file on dest box$/;"	m	struct:__anon1
dstfile	cmtkp.h	/^    ::std::string dstfile;$/;"	m	struct:cmtkp::msghead
entry_list	IniHelper.h	/^	var_entry entry_list[MAX_VAR];$/;"	m	struct:section
entry_number	IniHelper.h	/^	int		entry_number;$/;"	m	struct:section
error_msg	cm_result.cpp	/^const char * error_msg(int errcode)$/;"	f
fetch_file_from_host	cm_function.cpp	/^int fetch_file_from_host (cmdev_t *dev, const cm_client_config_t * config)$/;"	f
file	cmconfig.h	/^	char		file[CONF_FILE];	\/\/file to upload$/;"	m	struct:__anon1
file	cmtkp.h	/^    ::std::string file;$/;"	m	struct:cmtkp::msghead
file_msg	cmconfig.h	/^	CommandMessage * file_msg; $/;"	m	struct:__anon1
filedata	cmtkp.h	/^    ::cmtkp::byteArray filedata;$/;"	m	struct:cmtkp::CommandMessage
filedata	cmtkp.h	/^    ::cmtkp::byteArray filedata;$/;"	m	struct:cmtkp::response
fileinfo	cmtkp.h	/^    ::cmtkp::byteArray fileinfo;$/;"	m	struct:cmtkp::CommandMessage
filemd5	cmtkp.h	/^    ::std::string filemd5;$/;"	m	struct:cmtkp::msghead
filename	cmtkp.h	/^    ::std::string filename;$/;"	m	struct:cmtkp::response
filesize	cmtkp.h	/^    ::Ice::Long filesize;$/;"	m	struct:cmtkp::msghead
finish_time	cmconfig.h	/^	time_t	finish_time;	\/\/when it finish running..$/;"	m	struct:__anon2
finish_time	cmconfig.h	/^	time_t 		finish_time; \/\/when it run over$/;"	m	struct:__anon3
forbid_root	cmconfig.h	/^	unsigned short 	forbid_root;		\/\/forbid root login or run flag$/;"	m	struct:__anon1
forbidroot	cmconfig.h	/^	unsigned short	forbidroot;$/;"	m	struct:__anon1
g_host_func	cm_init.cpp	/^host_func_t g_host_func = 0;$/;"	v
g_ic	cm_init.cpp	/^Ice::CommunicatorPtr g_ic;$/;"	v
getopt	getopt.cpp	/^getopt(int nargc, char* const * nargv, const char* ostr)$/;"	f
getopt1	getopt.cpp	/^int getopt1(int nargc, char* nargv[],  const char* ostr)$/;"	f
head	cmtkp.h	/^    ::cmtkp::msghead head;$/;"	m	struct:cmtkp::CommandMessage
host	cmtkp.h	/^    ::Ice::Long host;$/;"	m	struct:cmtkp::command
host_func_t	cmconfig.h	/^typedef int(*host_func_t)(cmdev_t * dev, const cm_client_config_t * config);$/;"	t
hostaddr	cmtkp.h	/^    ::Ice::Long hostaddr;$/;"	m	struct:cmtkp::msghead
hostname	cmconfig.h	/^	char	hostname[64];$/;"	m	struct:__anon6
hostport	cmtkp.h	/^    ::Ice::Int hostport;$/;"	m	struct:cmtkp::msghead
ice_adapterId	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_adapterId(const std::string& __id) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_batchDatagram	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_batchDatagram() const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_batchOneway	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_batchOneway() const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_clone	cmtkp.cpp	/^cmtkp::CmdMessageHandler::ice_clone() const$/;"	f	class:cmtkp::CmdMessageHandler
ice_collocationOptimized	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_collocationOptimized(bool __co) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_compress	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_compress(bool __compress) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_connectionCached	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_connectionCached(bool __cached) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_connectionId	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_connectionId(const std::string& __id) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_context	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_context(const ::Ice::Context& __context) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_datagram	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_datagram() const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_endpointSelection	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_endpointSelection(::Ice::EndpointSelectionType __est) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_endpoints	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_id	cmtkp.cpp	/^cmtkp::CmdMessageHandler::ice_id(const ::Ice::Current&) const$/;"	f	class:cmtkp::CmdMessageHandler
ice_ids	cmtkp.cpp	/^cmtkp::CmdMessageHandler::ice_ids(const ::Ice::Current&) const$/;"	f	class:cmtkp::CmdMessageHandler
ice_isA	cmtkp.cpp	/^cmtkp::CmdMessageHandler::ice_isA(const ::std::string& _s, const ::Ice::Current&) const$/;"	f	class:cmtkp::CmdMessageHandler
ice_locator	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_locator(const ::Ice::LocatorPrx& __locator) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_locatorCacheTimeout	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_locatorCacheTimeout(int __timeout) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_oneway	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_oneway() const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_preferSecure	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_preferSecure(bool __preferSecure) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_router	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_router(const ::Ice::RouterPrx& __router) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_secure	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_secure(bool __secure) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_staticId	cmtkp.cpp	/^IceProxy::cmtkp::CmdMessageHandler::ice_staticId()$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_staticId	cmtkp.cpp	/^cmtkp::CmdMessageHandler::ice_staticId()$/;"	f	class:cmtkp::CmdMessageHandler
ice_timeout	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_timeout(int __timeout) const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
ice_twoway	cmtkp.h	/^    ::IceInternal::ProxyHandle<CmdMessageHandler> ice_twoway() const$/;"	f	class:IceProxy::cmtkp::CmdMessageHandler
index	cmconfig.h	/^	int 		index; \/\/index of this thread or task $/;"	m	struct:__anon3
index	cmconfig.h	/^	unsigned long index;$/;"	m	struct:__anon2
index	cmtkp.h	/^    ::std::string index;$/;"	m	struct:cmtkp::msghead
infodata	cmtkp.h	/^    ::cmtkp::byteArray infodata;$/;"	m	struct:cmtkp::response
infoname	cmtkp.h	/^    ::std::string infoname;$/;"	m	struct:cmtkp::response
init_devlist	cm_init_dev.cpp	/^int init_devlist(dev_list_t * dev_list, const cm_client_config_t *config)$/;"	f
init_ice	cm_init.cpp	/^int init_ice(int argc, char* argv[])$/;"	f
init_network	cm_init.cpp	/^int init_network (void)$/;"	f
init_parameters	cm_init.cpp	/^int init_parameters(int argc, char* argv[], cm_client_config_t * client_config)$/;"	f
init_tasks	cm_init_task.cpp	/^int init_tasks(cm_client_config_t * config, $/;"	f
ip	NetHelper.h	/^		unsigned int ip;$/;"	m	struct:__anon8
ipArray	cmtkp.h	/^typedef ::std::vector< ::Ice::Long> ipArray;$/;"	t	namespace:cmtkp
ip_struct_t	cmconfig.h	/^}ip_struct_t;$/;"	t	typeref:struct:__anon6
ipaddr	cmconfig.h	/^	unsigned int ipaddr;$/;"	m	struct:__anon6
iplist	cmconfig.h	/^	device_t	iplist[MAX_LOCAL_ADDR];$/;"	m	struct:__anon1
ipnum	cmconfig.h	/^	unsigned int 	ipnum;$/;"	m	struct:__anon1
key_t	os_independent.h	/^typedef int key_t;$/;"	t
load_file2msg	cm_init_task.cpp	/^int load_file2msg(const char * szfile, CommandMessage * file_msg, const cm_client_config_t * config)$/;"	f
local_file	cmconfig.h	/^	char		local_file  [CONF_DIR]; \/\/which to save$/;"	m	struct:__anon1
localfile	cmtkp.h	/^    ::std::string localfile;$/;"	m	struct:cmtkp::msghead
login	cmconfig.h	/^	char		login	[USER_NAME];$/;"	m	struct:__anon1
m_Error	IniHelper.h	/^	int  m_Error; \/\/ error flag$/;"	m	class:CIniHelper
m_fp	IniHelper.h	/^	FILE * m_fp ; \/\/file pointer$/;"	m	class:CIniHelper
m_nRet	IniHelper.h	/^	int  m_nRet;$/;"	m	class:CIniHelper
m_pos	IniHelper.h	/^	long m_pos;$/;"	m	class:CIniHelper
m_strRet	IniHelper.h	/^	char m_strRet[VAR_VAL];$/;"	m	class:CIniHelper
mac	NetHelper.h	/^		unsigned char mac[6];$/;"	m	struct:__anon8
magicmsg	cmtkp.h	/^struct magicmsg$/;"	s	namespace:cmtkp
main	main.cpp	/^int main( int argc, char* argv[])$/;"	f
mem_file_handle	os_independent.h	/^typedef HANDLE    mem_file_handle;$/;"	t
mem_file_handle	os_independent.h	/^typedef void*    mem_file_handle;$/;"	t
mkdir_rec	cm_utils.cpp	/^int 	mkdir_rec(const char* path)$/;"	f
mode	cmconfig.h	/^	char		mode;			\/\/1 for cmd and 2 for file$/;"	m	struct:__anon1
more	cmtkp.h	/^    ::Ice::Int more;$/;"	m	struct:cmtkp::response
msghead	cmtkp.h	/^struct msghead$/;"	s	namespace:cmtkp
msgtype	cmtkp.h	/^    ::Ice::Int msgtype;$/;"	m	struct:cmtkp::msghead
my_basename	cm_utils.cpp	/^char* my_basename (char* path)$/;"	f
my_dirname	cm_utils.cpp	/^char * my_dirname (char * path)$/;"	f
name	NetHelper.h	/^		char	name[10];$/;"	m	struct:__anon8
netmask	NetHelper.h	/^		unsigned int netmask;$/;"	m	struct:__anon8
nothing	cmconfig.h	/^	char nothing[10];$/;"	m	struct:__anon6
nret	cmconfig.h	/^	int 	 nret;		\/\/return value > 0 success else failed$/;"	m	struct:__anon2
nret	cmtkp.h	/^    ::Ice::Int nret;$/;"	m	struct:cmtkp::msghead
operator !=	cmtkp.h	/^    bool operator!=(const CommandMessage& __rhs) const$/;"	f	struct:cmtkp::CommandMessage
operator !=	cmtkp.h	/^    bool operator!=(const command& __rhs) const$/;"	f	struct:cmtkp::command
operator !=	cmtkp.h	/^    bool operator!=(const magicmsg& __rhs) const$/;"	f	struct:cmtkp::magicmsg
operator !=	cmtkp.h	/^    bool operator!=(const msghead& __rhs) const$/;"	f	struct:cmtkp::msghead
operator !=	cmtkp.h	/^    bool operator!=(const response& __rhs) const$/;"	f	struct:cmtkp::response
operator <	cmtkp.cpp	/^cmtkp::CommandMessage::operator<(const CommandMessage& __rhs) const$/;"	f	class:cmtkp::CommandMessage
operator <	cmtkp.cpp	/^cmtkp::command::operator<(const command& __rhs) const$/;"	f	class:cmtkp::command
operator <	cmtkp.cpp	/^cmtkp::magicmsg::operator<(const magicmsg& __rhs) const$/;"	f	class:cmtkp::magicmsg
operator <	cmtkp.cpp	/^cmtkp::msghead::operator<(const msghead& __rhs) const$/;"	f	class:cmtkp::msghead
operator <	cmtkp.cpp	/^cmtkp::operator<(const ::cmtkp::CmdMessageHandler& l, const ::cmtkp::CmdMessageHandler& r)$/;"	f	class:cmtkp
operator <	cmtkp.cpp	/^cmtkp::response::operator<(const response& __rhs) const$/;"	f	class:cmtkp::response
operator <=	cmtkp.h	/^    bool operator<=(const CommandMessage& __rhs) const$/;"	f	struct:cmtkp::CommandMessage
operator <=	cmtkp.h	/^    bool operator<=(const command& __rhs) const$/;"	f	struct:cmtkp::command
operator <=	cmtkp.h	/^    bool operator<=(const magicmsg& __rhs) const$/;"	f	struct:cmtkp::magicmsg
operator <=	cmtkp.h	/^    bool operator<=(const msghead& __rhs) const$/;"	f	struct:cmtkp::msghead
operator <=	cmtkp.h	/^    bool operator<=(const response& __rhs) const$/;"	f	struct:cmtkp::response
operator ==	cmtkp.cpp	/^cmtkp::CommandMessage::operator==(const CommandMessage& __rhs) const$/;"	f	class:cmtkp::CommandMessage
operator ==	cmtkp.cpp	/^cmtkp::command::operator==(const command& __rhs) const$/;"	f	class:cmtkp::command
operator ==	cmtkp.cpp	/^cmtkp::magicmsg::operator==(const magicmsg& __rhs) const$/;"	f	class:cmtkp::magicmsg
operator ==	cmtkp.cpp	/^cmtkp::msghead::operator==(const msghead& __rhs) const$/;"	f	class:cmtkp::msghead
operator ==	cmtkp.cpp	/^cmtkp::operator==(const ::cmtkp::CmdMessageHandler& l, const ::cmtkp::CmdMessageHandler& r)$/;"	f	class:cmtkp
operator ==	cmtkp.cpp	/^cmtkp::response::operator==(const response& __rhs) const$/;"	f	class:cmtkp::response
operator >	cmtkp.h	/^    bool operator>(const CommandMessage& __rhs) const$/;"	f	struct:cmtkp::CommandMessage
operator >	cmtkp.h	/^    bool operator>(const command& __rhs) const$/;"	f	struct:cmtkp::command
operator >	cmtkp.h	/^    bool operator>(const magicmsg& __rhs) const$/;"	f	struct:cmtkp::magicmsg
operator >	cmtkp.h	/^    bool operator>(const msghead& __rhs) const$/;"	f	struct:cmtkp::msghead
operator >	cmtkp.h	/^    bool operator>(const response& __rhs) const$/;"	f	struct:cmtkp::response
operator >=	cmtkp.h	/^    bool operator>=(const CommandMessage& __rhs) const$/;"	f	struct:cmtkp::CommandMessage
operator >=	cmtkp.h	/^    bool operator>=(const command& __rhs) const$/;"	f	struct:cmtkp::command
operator >=	cmtkp.h	/^    bool operator>=(const magicmsg& __rhs) const$/;"	f	struct:cmtkp::magicmsg
operator >=	cmtkp.h	/^    bool operator>=(const msghead& __rhs) const$/;"	f	struct:cmtkp::msghead
operator >=	cmtkp.h	/^    bool operator>=(const response& __rhs) const$/;"	f	struct:cmtkp::response
opt	cmconfig.h	/^	char opt[10];$/;"	m	struct:__anon7
opt_help_t	cmconfig.h	/^}opt_help_t;$/;"	t	typeref:struct:__anon7
opt_list	cm_init.cpp	/^static opt_help_t opt_list [] =$/;"	v	file:
optarg	getopt.cpp	/^char	*optarg;		\/* argument associated with option *\/$/;"	v
opterr	getopt.cpp	/^int	opterr = 1,		\/* if error message should be printed *\/$/;"	v
optind	getopt.cpp	/^optind = 1,		\/* index into parent argv vector *\/$/;"	v
optopt	getopt.cpp	/^optopt,			\/* character checked for validity *\/$/;"	v
optreset	getopt.cpp	/^optreset;		\/* reset getopt *\/$/;"	v
over	cmconfig.h	/^	bool	 over;		\/\/is it run over ?$/;"	m	struct:__anon2
over	cmconfig.h	/^	unsigned char		over;\/\/whether this thread run over ?$/;"	m	struct:__anon3
pid	cmtkp.h	/^    ::Ice::Int pid;$/;"	m	struct:cmtkp::command
port	cmtkp.h	/^    ::Ice::Int port;$/;"	m	struct:cmtkp::command
print_thread_list	cm_thread.cpp	/^void print_thread_list(const thread_pool_t  * thread_pool)$/;"	f
print_usage	cm_init.cpp	/^void print_usage(int argc, char* argv[])$/;"	f
rand_num1	cmconfig.h	/^	int rand_num1;$/;"	m	struct:__anon6
rcsid	getopt.cpp	/^static char *rcsid = "$Id: getopt.c,v 1.2 1998\/01\/21 22:27:05 billm Exp $";$/;"	v	file:
remote_addr	cmconfig.h	/^	unsigned int	remote_addr;		\/\/same as above$/;"	m	struct:__anon1
remote_file	cmconfig.h	/^	char		remote_file [CONF_DIR]; \/\/which to download$/;"	m	struct:__anon1
remote_host_name	cmconfig.h	/^	char		remote_host_name[HOST_NAME];$/;"	m	struct:__anon1
remote_port	cmconfig.h	/^	unsigned short 	remote_port;		\/\/which port to connect $/;"	m	struct:__anon1
remotefile	cmtkp.h	/^    ::std::string remotefile;$/;"	m	struct:cmtkp::msghead
response	cmtkp.h	/^struct response$/;"	s	namespace:cmtkp
result	cmtkp.h	/^    ::cmtkp::StringArray result;$/;"	m	struct:cmtkp::CommandMessage
run_mode	cmconfig.h	/^	char		run_mode;		\/\/1 for real time and 2 for background$/;"	m	struct:__anon1
runmode	cmtkp.h	/^    ::Ice::Int runmode;$/;"	m	struct:cmtkp::msghead
section	IniHelper.h	/^struct section$/;"	s
send_cmd2host	cm_function.cpp	/^int send_cmd2host (cmdev_t* dev, const cm_client_config_t * config)$/;"	f
send_file2host	cm_function.cpp	/^int send_file2host (cmdev_t* dev, const cm_client_config_t * config)$/;"	f
show	cmconfig.h	/^	unsigned char show;$/;"	m	struct:__anon7
show_result	cm_result.cpp	/^void show_result (dev_list_t * devlist, const cm_client_config_t * config)$/;"	f
show_result_obvious	cm_result.cpp	/^void show_result_obvious (dev_list_t * devlist, const cm_client_config_t * config)$/;"	f
show_result_silent	cm_result.cpp	/^void show_result_silent (dev_list_t * devlist, const cm_client_config_t * config)$/;"	f
show_version	cm_utils.cpp	/^int 	show_version (int argc, char* argv[])$/;"	f
silent	cmconfig.h	/^	char		silent;			\/\/1 store result in files or print it to stdout$/;"	m	struct:__anon1
socklen_t	os_independent.h	/^typedef int socklen_t;$/;"	t
srchost	cmtkp.h	/^    ::cmtkp::ipArray srchost;$/;"	m	struct:cmtkp::msghead
start_tasks	cm_thread.cpp	/^int start_tasks(thread_pool_t  * thread_pool,  cm_client_config_t * config)$/;"	f
start_time	cmconfig.h	/^	time_t		start_time; \/\/when it began run$/;"	m	struct:__anon3
start_time	cmconfig.h	/^	time_t	start_time;	\/\/when it start to runing..$/;"	m	struct:__anon2
strcasecmp	IniHelper.h	/^static int strcasecmp(const char *s1, const char *s2)$/;"	f
stret	cmconfig.h	/^	::cmtkp::byteArray stret;$/;"	m	struct:__anon2
strncasecmp	IniHelper.h	/^static int strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f
taskid	cmtkp.h	/^    ::Ice::Int taskid;$/;"	m	struct:cmtkp::msghead
tasknum	cmconfig.h	/^	unsigned short	tasknum;		\/\/how many tasks are running$/;"	m	struct:__anon1
th_num	cmconfig.h	/^	int	  th_num;\/\/thread number$/;"	m	struct:__anon4
thread	cmconfig.h	/^	thread_t  thread[MAX_TASK_NUM]; \/\/thread list $/;"	m	struct:__anon4
thread_pool_t	cmconfig.h	/^}thread_pool_t;$/;"	t	typeref:struct:__anon4
thread_run_over	cm_thread.cpp	/^unsigned char	thread_run_over(const  thread_pool_t * thread_pool)$/;"	f
thread_t	cmconfig.h	/^}thread_t;$/;"	t	typeref:struct:__anon3
tid	cmconfig.h	/^	int		tid;$/;"	m	struct:__anon3
tid	cmconfig.h	/^	pthread_t 	tid; \/\/thread id or task id$/;"	m	struct:__anon3
time_out	cmconfig.h	/^	unsigned int	time_out;		\/\/added @2011-05-18$/;"	m	struct:__anon1
timestamp	cmtkp.h	/^    ::Ice::Long timestamp;$/;"	m	struct:cmtkp::msghead
title	IniHelper.h	/^	char title[SEC_TITLE];$/;"	m	struct:section
tt	os_independent.h	/^static int tt = 1;$/;"	v
type	cmtkp.h	/^    ::Ice::Int type;$/;"	m	struct:cmtkp::magicmsg
upCast	cmtkp.cpp	/^::Ice::Object* IceInternal::upCast(::cmtkp::CmdMessageHandler* p) { return p; }$/;"	f	class:IceInternal
upCast	cmtkp.cpp	/^::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::cmtkp::CmdMessageHandler* p) { return p; }$/;"	f	class:IceInternal
user	cmconfig.h	/^	char 	user[64];$/;"	m	struct:__anon6
username	cmconfig.h	/^	char 		username[USER_NAME];$/;"	m	struct:__anon1
var_entry	IniHelper.h	/^struct var_entry$/;"	s
var_name	IniHelper.h	/^	char var_name[VAR_NAME];$/;"	m	struct:var_entry
var_value	IniHelper.h	/^	char var_value[VAR_VAL];$/;"	m	struct:var_entry
work_thread_func	cm_thread.cpp	/^work_thread_func($/;"	f
~CIniHelper	IniHelper.cpp	/^CIniHelper::~CIniHelper()$/;"	f	class:CIniHelper
